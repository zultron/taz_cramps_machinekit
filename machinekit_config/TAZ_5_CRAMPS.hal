# #######################################
#
# HAL file for TAZ-5 BeagleBone + CRAMPS cape retrofit
#
# Derived from example CRAMPS config
#
# See https://github.com/zultron/taz_machinekit_retrofit
#
# Pin assignments are documented in setup.sh
#
# ########################################

# Launch the setup script to make sure hardware setup looks good
loadusr -w ./setup.sh


# ###################################
# Core EMC/HAL Loads
# ###################################

# motion controller, get name and thread periods from ini file
# trajectory planner
loadrt tp
loadrt trivkins
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES tp=tp kins=trivkins

# gpio drivers
loadrt hal_bb_gpio output_pins=816,822,823,824,825,826,914,921,923,925,941 input_pins=807,808,809,810,817,911,913

# 10mS PRU driver with 5 stepgens and 4 pwmgens
loadrt hal_pru_generic prucode=$(HAL_RTMOD_DIR)/xenomai/pru_generic.bin pru=0 num_stepgens=5 num_pwmgens=4 halname=hpg
setp hpg.pwmgen.00.pwm_period       10000000

# PIDs with input limits for heaters
loadrt pid count=3
loadrt limit1 count=3

# Thermistor ADC values for PWM
#
# 24V silicone heater [3]: Honeywell 100k [4], [5]
# Hexagon Hot End thermistor [1]: EPCOS 100k [2]
#    
# [1]: https://www.lulzbot.com/store/parts/100k-epcos-thermistor
# [2]: http://www.epcos.com/inf/50/db/ntc_09/Glass_enc_Sensors__B57560__G560__G1560.pdf
# [3]: https://www.lulzbot.com/store/parts/24v-silicone-heater
# [4]: https://www.lulzbot.com/store/parts/100k-honeywell-axial-thermistor
# [5]: http://media.digikey.com/pdf/Data%20Sheets/Honeywell%20Sensing%20&%20Control%20PDFs/135-104LAG-J01.pdf
loadusr -Wn Therm hal_temp_bbb -n Therm -c 04:epcos_B57560G1104,05:epcos_B57560G1104,06:honeywell_100k_135-104LAG-J01 -b CRAMPS

# ################################################
# THREADS
# ################################################

addf hpg.capture-position                 servo-thread
addf bb_gpio.read                         servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
addf pid.0.do-pid-calcs                   servo-thread
addf pid.1.do-pid-calcs                   servo-thread
addf pid.2.do-pid-calcs                   servo-thread
addf limit1.0                             servo-thread
addf limit1.1                             servo-thread
addf limit1.2                             servo-thread
addf hpg.update                           servo-thread
addf bb_gpio.write                        servo-thread


# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# X [0] Axis
# ################
#
# Attached to CRAMPS X motor connector with hpg.stepgen.00

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

net emcmot.00.enable <= axis.0.amp-enable-out
net emcmot.00.enable => hpg.stepgen.00.enable


# position command and feedback
net emcmot.00.pos-cmd <= axis.0.motor-pos-cmd
net emcmot.00.pos-cmd => hpg.stepgen.00.position-cmd

net motor.00.pos-fb <= hpg.stepgen.00.position-fb
net motor.00.pos-fb => axis.0.motor-pos-fb


# timing parameters
setp hpg.stepgen.00.dirsetup        [AXIS_0]DIRSETUP
setp hpg.stepgen.00.dirhold         [AXIS_0]DIRHOLD

setp hpg.stepgen.00.steplen         [AXIS_0]STEPLEN
setp hpg.stepgen.00.stepspace       [AXIS_0]STEPSPACE

setp hpg.stepgen.00.position-scale  [AXIS_0]SCALE

setp hpg.stepgen.00.maxvel          [AXIS_0]STEPGEN_MAX_VEL
setp hpg.stepgen.00.maxaccel        [AXIS_0]STEPGEN_MAX_ACC

#setp hpg.stepgen.00.step_type       0
# P8.43 PRU1.out2
setp hpg.stepgen.00.steppin        813
# P8.44 PRU1.out4
setp hpg.stepgen.00.dirpin         812

# Limit switch
newsig limit-x-min bit
net limit-x-min <= bb_gpio.p8.in-08
setp bb_gpio.p8.in-08.invert 1
net limit-x-min => axis.0.home-sw-in
net limit-x-min => axis.0.neg-lim-sw-in


# ################
# Y [1] Axis
# ################
#
# Attached to CRAMPS Y motor connector with hpg.stepgen.01

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

net emcmot.01.enable <= axis.1.amp-enable-out
net emcmot.01.enable => hpg.stepgen.01.enable


# position command and feedback
net emcmot.01.pos-cmd <= axis.1.motor-pos-cmd
net emcmot.01.pos-cmd => hpg.stepgen.01.position-cmd

net motor.01.pos-fb <= hpg.stepgen.01.position-fb
net motor.01.pos-fb => axis.1.motor-pos-fb


# timing parameters
setp hpg.stepgen.01.dirsetup        [AXIS_1]DIRSETUP
setp hpg.stepgen.01.dirhold         [AXIS_1]DIRHOLD

setp hpg.stepgen.01.steplen         [AXIS_1]STEPLEN
setp hpg.stepgen.01.stepspace       [AXIS_1]STEPSPACE

setp hpg.stepgen.01.position-scale  [AXIS_1]SCALE

setp hpg.stepgen.01.maxvel          [AXIS_1]STEPGEN_MAX_VEL
setp hpg.stepgen.01.maxaccel        [AXIS_1]STEPGEN_MAX_ACC

#setp hpg.stepgen.01.step_type       0
# P8.42 PRU1.out5
setp hpg.stepgen.01.steppin        815
# P8.39 PRU1.out6
setp hpg.stepgen.01.dirpin         814

# Limit switch
newsig limit-y-min bit
net limit-y-min <= bb_gpio.p8.in-10
setp bb_gpio.p8.in-10.invert 1
net limit-y-min => axis.1.home-sw-in
net limit-y-min => axis.1.neg-lim-sw-in


# ################
# Z [2] Axis
# ################

# The TAZ-5 Z axis has only one limit switch, even though it has two
# motors.  Instead of using gantrykins or the gantry HAL component,
# simply tie both joints' stepgens together.

# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE
net emcmot.02.enable <= axis.2.amp-enable-out
# ...per-joint enable netted below

# position command and feedback
net emcmot.02.pos-cmd <= axis.2.motor-pos-cmd
net motor.02.pos-fb => axis.2.motor-pos-fb
# ...per-joint positions netted below

# #######
# Right motor
#
# Attached to CRAMPS Z motor connector with hpg.stepgen.02

# enable
net emcmot.02.enable => hpg.stepgen.02.enable

# position command and feedback
net emcmot.02.pos-cmd => hpg.stepgen.02.position-cmd
net motor.02.pos-fb <= hpg.stepgen.02.position-fb


# timing parameters
setp hpg.stepgen.02.dirsetup        [AXIS_2]DIRSETUP
setp hpg.stepgen.02.dirhold         [AXIS_2]DIRHOLD

setp hpg.stepgen.02.steplen         [AXIS_2]STEPLEN
setp hpg.stepgen.02.stepspace       [AXIS_2]STEPSPACE

setp hpg.stepgen.02.position-scale  [AXIS_2]SCALE

setp hpg.stepgen.02.maxvel          [AXIS_2]STEPGEN_MAX_VEL
setp hpg.stepgen.02.maxaccel        [AXIS_2]STEPGEN_MAX_ACC

#setp hpg.stepgen.02.step_type       0
# P8.27 PRU1.out8
setp hpg.stepgen.02.steppin        819
# P8.29 PRU1.out9
setp hpg.stepgen.02.dirpin         818


# #######
# Left motor
#
# Attached to CRAMPS E2 motor connector with hpg.stepgen.03

# enable stepgen
net emcmot.02.enable => hpg.stepgen.03.enable

# position command and feedback
net emcmot.02.pos-cmd => hpg.stepgen.03.position-cmd
# (feedback supplied by hpg.stepgen.02)

# timing parameters
setp hpg.stepgen.03.dirsetup        [AXIS_2]DIRSETUP
setp hpg.stepgen.03.dirhold         [AXIS_2]DIRHOLD

setp hpg.stepgen.03.steplen         [AXIS_2]STEPLEN
setp hpg.stepgen.03.stepspace       [AXIS_2]STEPSPACE

setp hpg.stepgen.03.position-scale  [AXIS_2]SCALE

setp hpg.stepgen.03.maxvel          [AXIS_2]STEPGEN_MAX_VEL
setp hpg.stepgen.03.maxaccel        [AXIS_2]STEPGEN_MAX_ACC

#setp hpg.stepgen.03.step_type       0
setp hpg.stepgen.03.steppin        924
setp hpg.stepgen.03.dirpin         926

# ######
# Limit switch
newsig limit-z-min bit
net limit-z-min <= bb_gpio.p9.in-13
setp bb_gpio.p9.in-13.invert 1
net limit-z-min => axis.2.home-sw-in
net limit-z-min => axis.2.neg-lim-sw-in


# ################
# A/Extruder [3] Axis
# ################
#
# Two extruders are MUXed

# ################
# E0/E1 Motor (shared)

# The two extruder motors share hpg.stepgen.04 under the assumption
# that only one will move at any time.  Step and dir pin parameters
# will have to be set while running.

# axis enable chain
newsig emcmot.03.enable bit
sets emcmot.03.enable FALSE

net emcmot.03.enable <= axis.3.amp-enable-out
net emcmot.03.enable => hpg.stepgen.04.enable

# position command and feedback
net emcmot.03.pos-cmd <= axis.3.motor-pos-cmd
net emcmot.03.pos-cmd => hpg.stepgen.04.position-cmd

net motor.03.pos-fb <= hpg.stepgen.04.position-fb
net motor.03.pos-fb => axis.3.motor-pos-fb

# timing parameters
setp hpg.stepgen.04.dirsetup        [AXIS_3]DIRSETUP
setp hpg.stepgen.04.dirhold         [AXIS_3]DIRHOLD

setp hpg.stepgen.04.steplen         [AXIS_3]STEPLEN
setp hpg.stepgen.04.stepspace       [AXIS_3]STEPSPACE

# `hpg.stepgen.04.position-scale` multiplexed below

setp hpg.stepgen.04.maxvel          [AXIS_3]STEPGEN_MAX_VEL
setp hpg.stepgen.04.maxaccel        [AXIS_3]STEPGEN_MAX_ACC

# Multiplex extruders
sets extruder.select 0
# E0 motor on P205 E0 motor connector, with step on p9.16 and dir on
# p9.12
sets e0.motor.steppin              916
sets e0.motor.dirpin               912
sets e0.motor.esteps               [TAZ_5]E0_ESTEPS
# E1 Motor on P206 E1 motor connector, with step on p9.17 and dir on
# p9.18
sets e1.motor.steppin              917
sets e1.motor.dirpin               918
sets e1.motor.esteps               [TAZ_5]E1_ESTEPS
# Create 3x 2 element multiplexers
loadrt mux_generic config="uu2,uu2,uu2"
# Step multiplexer on mux-gen.00
net e0.motor.steppin => mux-gen.00.in-u32-00
net e1.motor.steppin => mux-gen.00.in-u32-01
net extruder.select => mux-gen.00.sel-int
net mux-gen.00.out-u32 => hpg.stepgen.04.steppin
# Dir multiplexer on mux-gen.01
net e0.motor.dirpin => mux-gen.01.in-u32-00
net e1.motor.dirpin => mux-gen.01.in-u32-01
net extruder.select => mux-gen.01.sel-int
net mux-gen.01.out-u32 => hpg.stepgen.04.dirpin
# E steps multiplexer on mux-gen.02
net e0.motor.esteps => mux-gen.02.in-u32-00
net e1.motor.esteps => mux-gen.02.in-u32-01
net extruder.select => mux-gen.02.sel-int
net mux-gen.02.out-u32 => hpg.stepgen.04.position-scale

# ################
# E0 Heater

# E0 heater signals
newsig e0.temp.set   float
newsig e0.temp.meas  float

# E0 heater PID 0
#setp pid.0.FF0      0
#setp pid.0.FF1      0
#setp pid.0.FF2      0
setp pid.0.Pgain     0.30
setp pid.0.Igain     0.00001
setp pid.0.Dgain     0.9375
setp pid.0.maxerrorI 1.0
setp pid.0.bias      0.5
setp pid.0.enable    1
# Feedback from P504 THERM 0 = ADC ch. 4
net e0.temp.meas     Therm.ch-04.value => pid.0.feedback
sets e0.temp.set     0
net e0.temp.set      => pid.0.command
# PID output limited to non-negative values
setp limit1.0.min    0
net e0.heater.raw    pid.0.output => limit1.0.in
net e0.heater        <= limit1.0.out

# E0 heater PWM 0
# output to P405 E0 FET 2 = BBB p9.15
setp hpg.pwmgen.00.out.00.pin       915
setp hpg.pwmgen.00.out.00.enable    1
setp hpg.pwmgen.00.out.00.value     0.0
# input from PID 1
net e0.heater => hpg.pwmgen.00.out.00.value

################
# E1 heater FET 3

# E1 heater signals
newsig e1.temp.set   float
newsig e1.temp.meas  float

# E1 heater PID 1
#setp pid.1.FF0      0
#setp pid.1.FF1      0
#setp pid.1.FF2      0
setp pid.1.Pgain     0.30
setp pid.1.Igain     0.00001
setp pid.1.Dgain     0.9375
setp pid.1.maxerrorI 1.0
setp pid.1.bias      0.5
setp pid.1.enable    [TAZ_5]DUAL_EXTRUDER_ENABLE
# Feedback from P504 THERM 1 = ADC ch. 5
net e1.temp.meas     Therm.ch-05.value => pid.1.feedback
sets e1.temp.set     0
net e1.temp.set      => pid.1.command
# PID output limited to non-negative values
setp limit1.1.min    0
net e1.heater.raw    pid.1.output => limit1.1.in
net e1.heater        <= limit1.1.out

# E1 heater PWM 1
# output to P406 E1 FET 3 = BBB p9.27
setp hpg.pwmgen.00.out.01.pin       927
setp hpg.pwmgen.00.out.01.enable    [TAZ_5]DUAL_EXTRUDER_ENABLE
setp hpg.pwmgen.00.out.01.value     0.0

# ################
# Extruder Fan

newsig fan.speed.set float
sets fan.speed.set 0

# PWM 2 output to P408 E2 FET 4 = BBB p9.21
setp hpg.pwmgen.00.out.02.pin       921
# Arduino fan values in 0-255
setp hpg.pwmgen.00.out.02.scale     255
setp hpg.pwmgen.00.out.02.enable    1
net fan.speed.set => hpg.pwmgen.00.out.02.value

# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# Create estop signal chain
# Drive software estop to hardware
net estop-out iocontrol.0.user-enable-out => bb_gpio.p8.out-26
setp bb_gpio.p8.out-26.invert 1

# Monitor estop input from hardware
net estop-loop bb_gpio.p8.in-17 => iocontrol.0.emc-enable-in
setp bb_gpio.p8.in-17.invert 1

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# Axis enable signal (active low)
net emcmot.00.enable => bb_gpio.p9.out-14
setp bb_gpio.p9.out-14.invert 1

# Machine power
# Use halui.machine.is-on instead?
net emcmot.00.enable => bb_gpio.p9.out-23

# Tie machine power signal to the CRAMPS LED
# Feel free to tie any other signal you like to the LED
net emcmot.00.enable => bb_gpio.p9.out-25

# ##################################################
# Heated Bed
# ##################################################

# Heater signals
# Define signals to use elsewhere (ie: M1xx codes)
# If you change any names here, lots of things will break!
newsig bed.temp.set  float
newsig bed.temp.meas float

# Bed heater PID 2
#setp pid.2.FF0      0
#setp pid.2.FF1      0
#setp pid.2.FF2      0
setp pid.2.Pgain     1
setp pid.2.Igain     0.0
setp pid.2.Dgain     0.0
setp pid.2.maxerrorI 1.0
setp pid.2.bias      0.5
setp pid.2.enable    1
# Feedback from P504 THERM 2 = ADC ch. 6
net bed.temp.meas    Therm.ch-06.value => pid.2.feedback
sets bed.temp.set    0
net bed.temp.set     => pid.2.command
# PID output limited to non-negative values
setp limit1.2.min    0
net bed.heater.raw   pid.2.output => limit1.2.in
net bed.heater       <= limit1.2.out

# Bed Heater PWM 3
# output to P401 Bed Heater FET 1 = BBB p8.11
setp hpg.pwmgen.00.out.03.pin       811
setp hpg.pwmgen.00.out.03.enable    1
setp hpg.pwmgen.00.out.03.value     0.0
# input from PID 2
net bed.heater       => hpg.pwmgen.00.out.03.value
